import os
from dotenv import load_dotenv
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from pydantic import BaseModel, Field
from crewai.tools import BaseTool
from typing import Type

# Load environment variables
load_dotenv()
# Define input schema
class GSlackDMToolInput(BaseModel):
    summary: str = Field(
        ...,
        description='Summary generated by the summary_agent'
    )
# CrewAI Slack DM Tool
class SlackDMTool(BaseTool):
    name: str = "SlackDMTool"
    description: str = "Sends a direct message to a Slack user using the Slack WebClient"
    args_schema: Type[BaseModel] = GSlackDMToolInput
    def _run(self, summary: str) -> str:
        slack_tkn = os.getenv("SLACK_BOT_TKN")
        user_id = os.getenv("SLACK_MEMBER_ID")
        if not slack_tkn or not user_id:
            return "Missing SLACK_BOT_TKN or SLACK_MEMBER_ID in .env file"
        client = WebClient(token=slack_tkn)
        try:
            # Open DM channel with user
            dm = client.conversations_open(users=user_id)
            channel_id = dm["channel"]["id"]
            # Send message to that DM channel
            response = client.chat_postMessage(
                channel=channel_id,
                text=summary
            )
            return f"Message sent successfully. Timestamp: {response['ts']}"
        except SlackApiError as e:
            return f"Error sending message: {e.response['error']}"
